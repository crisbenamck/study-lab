import React, { useState } from 'react';
import { Send, Eye, Zap, AlertCircle } from 'lucide-react';
import { GoogleGenerativeAI } from '@google/generative-ai';

interface RequestInfo {
  model: string;
  duration: string;
  timestamp: string;
  success: boolean;
  responseLength?: number;
  error?: string;
}

interface GeminiTestProps {
  appState: {
    geminiApiKey: string;
    saveGeminiApiKey: (key: string) => void;
    isLoaded: boolean;
  };
}

const GeminiTest: React.FC<GeminiTestProps> = ({ appState }) => {
  const { geminiApiKey, saveGeminiApiKey } = appState;
  const [prompt, setPrompt] = useState('Explain how AI works in a few words');
  const [response, setResponse] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [requestInfo, setRequestInfo] = useState<RequestInfo | null>(null);
  const [model, setModel] = useState('gemini-2.5-flash');
  const [availableModels, setAvailableModels] = useState<string[]>([]);

  const testModels = [
    'gemini-2.5-flash',
    'gemini-2.5-pro', 
    'gemini-2.5-flash-lite',
    'gemini-2.0-flash',
    'gemini-2.0-flash-lite',
    'gemini-1.5-flash',
    'gemini-1.5-flash-8b',
    'gemini-1.5-pro'
  ];

  const listAvailableModels = async () => {
    if (!geminiApiKey.trim()) {
      setError('Por favor ingresa tu API key para listar modelos');
      return;
    }

    try {
      const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models', {
        headers: {
          'X-goog-api-key': geminiApiKey
        }
      });

      if (response.ok) {
        const data = await response.json();
        const modelNames = data.models
          ?.filter((model: { supportedGenerationMethods?: string[] }) => 
            model.supportedGenerationMethods?.includes('generateContent'))
          ?.map((model: { name: string }) => model.name.replace('models/', '')) || [];
        
        setAvailableModels(modelNames);
        console.log('üìã Modelos disponibles:', modelNames);
      } else {
        console.error('Error listando modelos:', response.status, response.statusText);
      }
    } catch (error) {
      console.error('Error conectando para listar modelos:', error);
    }
  };

  const samplePrompts = [
    'Explain how AI works in a few words',
    'Extract questions from this text: "1. What is JavaScript? A) A language B) A framework"',
    'Convert this to JSON: Question: What is React? Options: A) Library B) Language',
    'Hello, are you working?'
  ];

  const testGeminiDirect = async () => {
    if (!geminiApiKey.trim()) {
      setError('Por favor ingresa tu API key');
      return;
    }

    if (!prompt.trim()) {
      setError('Por favor ingresa un prompt');
      return;
    }

    setIsLoading(true);
    setError('');
    setResponse('');
    setRequestInfo(null);

    const startTime = Date.now();

    try {
      console.log('üß™ Testing Gemini Direct API...');
      console.log('üì° Modelo:', model);
      console.log('üìù Prompt:', prompt);

      const genAI = new GoogleGenerativeAI(geminiApiKey);
      const aiModel = genAI.getGenerativeModel({ model });

      const result = await aiModel.generateContent(prompt);
      const responseData = await result.response;
      const responseText = responseData.text();

      const endTime = Date.now();
      const duration = endTime - startTime;

      setResponse(responseText);
      setRequestInfo({
        model,
        duration: `${duration}ms`,
        responseLength: responseText.length,
        timestamp: new Date().toLocaleTimeString(),
        success: true
      });

      console.log('‚úÖ Respuesta recibida:', responseText);
      console.log('‚è±Ô∏è Duraci√≥n:', duration + 'ms');

    } catch (err: unknown) {
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      console.error('‚ùå Error en test:', err);
      
      const errorMsg = err instanceof Error ? err.message : 'Error desconocido';
      setError(errorMsg);
      setRequestInfo({
        model,
        duration: `${duration}ms`,
        error: errorMsg,
        timestamp: new Date().toLocaleTimeString(),
        success: false
      });
    } finally {
      setIsLoading(false);
    }
  };

  const testWithCurl = () => {
    const curlCommand = `curl -X POST "https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${geminiApiKey}" \\
  -H "Content-Type: application/json" \\
  -d '{
    "contents": [{
      "parts": [{
        "text": "${prompt.replace(/"/g, '\\"')}"
      }]
    }]
  }'`;

    navigator.clipboard.writeText(curlCommand);
    console.log('üìã Comando cURL copiado al portapapeles');
    alert('Comando cURL copiado al portapapeles');
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
          <Zap className="w-6 h-6 text-yellow-500" />
          Test de API Gemini
        </h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium mb-2">API Key</label>
            <input
              type="password"
              value={geminiApiKey}
              onChange={(e) => saveGeminiApiKey(e.target.value)}
              placeholder="Ingresa tu API key de Google AI Studio"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">Modelo</label>
            <select
              value={model}
              onChange={(e) => setModel(e.target.value)}
              className="w-full p-2 border rounded-md"
            >
              {(availableModels.length > 0 ? availableModels : testModels).map(m => (
                <option key={m} value={m}>{m}</option>
              ))}
            </select>
            {availableModels.length > 0 && (
              <div className="mt-1 text-xs text-green-600">
                ‚úÖ {availableModels.length} modelos disponibles cargados
              </div>
            )}
          </div>
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium mb-2">Prompt de prueba</label>
          <div className="mb-2 flex gap-2 flex-wrap">
            {samplePrompts.map((sample, index) => (
              <button
                key={index}
                onClick={() => setPrompt(sample)}
                className="text-xs px-3 py-2 font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-1"
                style={{
                  backgroundColor: '#e0e7ff',
                  color: '#3730a3',
                  border: '1px solid #c7d2fe',
                  boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = '#c7d2fe';
                  e.currentTarget.style.borderColor = '#a5b4fc';
                  e.currentTarget.style.boxShadow = '0 2px 4px 0 rgba(0, 0, 0, 0.1)';
                  e.currentTarget.style.transform = 'translateY(-1px)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = '#e0e7ff';
                  e.currentTarget.style.borderColor = '#c7d2fe';
                  e.currentTarget.style.boxShadow = '0 1px 2px 0 rgba(0, 0, 0, 0.05)';
                  e.currentTarget.style.transform = 'translateY(0)';
                }}
              >
                üìù Ejemplo {index + 1}
              </button>
            ))}
          </div>
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Escribe tu prompt aqu√≠..."
            className="w-full p-3 border rounded-md h-24"
          />
        </div>

        <div className="flex gap-4 mb-6">
          <button
            onClick={testGeminiDirect}
            disabled={isLoading}
            className="flex items-center gap-2 px-6 py-3 rounded-lg font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-300"
            style={{
              backgroundColor: isLoading ? '#e5e7eb' : '#2563eb',
              color: isLoading ? '#9ca3af' : '#ffffff',
              border: `1px solid ${isLoading ? '#e5e7eb' : '#2563eb'}`,
              boxShadow: isLoading ? 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)' : '0 1px 3px 0 rgba(0, 0, 0, 0.1)',
              cursor: isLoading ? 'not-allowed' : 'pointer'
            }}
            onMouseEnter={(e) => {
              if (!isLoading) {
                e.currentTarget.style.backgroundColor = '#1d4ed8';
                e.currentTarget.style.borderColor = '#1d4ed8';
                e.currentTarget.style.boxShadow = '0 4px 12px rgba(37, 99, 235, 0.3)';
                e.currentTarget.style.transform = 'translateY(-1px)';
              }
            }}
            onMouseLeave={(e) => {
              if (!isLoading) {
                e.currentTarget.style.backgroundColor = '#2563eb';
                e.currentTarget.style.borderColor = '#2563eb';
                e.currentTarget.style.boxShadow = '0 1px 3px 0 rgba(0, 0, 0, 0.1)';
                e.currentTarget.style.transform = 'translateY(0)';
              }
            }}
          >
            {isLoading ? (
              <div className="w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full animate-spin" />
            ) : (
              <Send className="w-4 h-4" />
            )}
            {isLoading ? 'Enviando...' : 'Enviar a Gemini'}
          </button>
          
          <button
            onClick={testWithCurl}
            className="flex items-center gap-2 px-6 py-3 rounded-lg font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-300"
            style={{
              backgroundColor: '#374151',
              color: '#ffffff',
              border: '1px solid #374151',
              boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.backgroundColor = '#1f2937';
              e.currentTarget.style.borderColor = '#1f2937';
              e.currentTarget.style.boxShadow = '0 4px 12px rgba(55, 65, 81, 0.3)';
              e.currentTarget.style.transform = 'translateY(-1px)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.backgroundColor = '#374151';
              e.currentTarget.style.borderColor = '#374151';
              e.currentTarget.style.boxShadow = '0 1px 3px 0 rgba(0, 0, 0, 0.1)';
              e.currentTarget.style.transform = 'translateY(0)';
            }}
          >
            <Eye className="w-4 h-4" />
            Copiar como cURL
          </button>

          <button
            onClick={listAvailableModels}
            className="flex items-center gap-2 px-6 py-3 rounded-lg font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-300"
            style={{
              backgroundColor: '#059669',
              color: '#ffffff',
              border: '1px solid #059669',
              boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.backgroundColor = '#047857';
              e.currentTarget.style.borderColor = '#047857';
              e.currentTarget.style.boxShadow = '0 4px 12px rgba(5, 150, 105, 0.3)';
              e.currentTarget.style.transform = 'translateY(-1px)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.backgroundColor = '#059669';
              e.currentTarget.style.borderColor = '#059669';
              e.currentTarget.style.boxShadow = '0 1px 3px 0 rgba(0, 0, 0, 0.1)';
              e.currentTarget.style.transform = 'translateY(0)';
            }}
          >
            <Zap className="w-4 h-4" />
            üìã Listar
          </button>
        </div>

        {requestInfo && (
          <div className="mb-4 p-3 bg-gray-50 rounded-md">
            <h4 className="font-medium mb-2">Informaci√≥n de la petici√≥n:</h4>
            <div className="text-sm space-y-1">
              <div><strong>Modelo:</strong> {requestInfo.model}</div>
              <div><strong>Duraci√≥n:</strong> {requestInfo.duration}</div>
              <div><strong>Timestamp:</strong> {requestInfo.timestamp}</div>
              <div><strong>Estado:</strong> 
                <span className={requestInfo.success ? 'text-green-600' : 'text-red-600'}>
                  {requestInfo.success ? ' ‚úÖ √âxito' : ' ‚ùå Error'}
                </span>
              </div>
              {requestInfo.responseLength && (
                <div><strong>Longitud respuesta:</strong> {requestInfo.responseLength} caracteres</div>
              )}
            </div>
          </div>
        )}

        {error && (
          <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-md">
            <div className="flex items-center gap-2 text-red-700">
              <AlertCircle className="w-4 h-4" />
              <strong>Error:</strong>
            </div>
            <div className="text-red-600 mt-1 text-sm font-mono">{error}</div>
          </div>
        )}

        {response && (
          <div className="p-4 bg-green-50 border border-green-200 rounded-md">
            <h4 className="font-medium text-green-800 mb-2">Respuesta de Gemini:</h4>
            <div className="text-sm bg-white p-3 rounded border">
              <pre className="whitespace-pre-wrap font-mono">{response}</pre>
            </div>
          </div>
        )}
      </div>

      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-bold mb-3">Informaci√≥n t√©cnica</h3>
        <div className="text-sm space-y-2">
          <div><strong>Librer√≠a:</strong> @google/generative-ai</div>
          <div><strong>Endpoint:</strong> https://generativelanguage.googleapis.com/v1beta/models/[model]:generateContent</div>
          <div><strong>M√©todo:</strong> POST</div>
          <div><strong>Headers:</strong> Content-Type: application/json, X-goog-api-key</div>
        </div>
        
        <div className="mt-4">
          <h4 className="font-medium mb-2">Modelos recomendados:</h4>
          <div className="text-sm space-y-1">
            <div><span className="font-medium text-green-600">gemini-2.5-flash:</span> M√°s reciente, pensamiento adaptativo y eficiencia de costos</div>
            <div><span className="font-medium text-blue-600">gemini-2.5-pro:</span> M√°xima precisi√≥n, ideal para tareas complejas</div>
            <div><span className="font-medium text-orange-600">gemini-2.5-flash-lite:</span> M√°s rentable, alta velocidad</div>
            <div><span className="font-medium text-gray-600">gemini-1.5-flash:</span> Estable pero obsoleto</div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GeminiTest;
